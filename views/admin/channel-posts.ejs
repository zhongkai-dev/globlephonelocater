<%- include('partials/header') %>

<div class="page-inner">
    <div class="page-header">
        <h4 class="page-title">Channel Posts</h4>
    </div>
    
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex align-items-center">
                        <h4 class="card-title">Manage Posts</h4>
                        <button class="btn btn-primary btn-round ml-auto" data-toggle="modal" data-target="#addPostModal">
                            <i class="fa fa-plus"></i>
                            Create New Post
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <% if (posts.length === 0) { %>
                        <div class="text-center py-5">
                            <i class="fas fa-bullhorn fa-4x text-muted mb-3"></i>
                            <h4 class="text-muted">No Posts Yet</h4>
                            <p>Click the "Create New Post" button to create your first post.</p>
                        </div>
                    <% } else { %>
                        <div class="table-responsive">
                            <table id="posts-table" class="display table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Status</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% posts.forEach(post => { %>
                                        <tr>
                                            <td><%= post.title %></td>
                                            <td>
                                                <% if (post.status === 'draft') { %>
                                                    <span class="badge badge-warning">Draft</span>
                                                <% } else if (post.status === 'published') { %>
                                                    <span class="badge badge-success">Published</span>
                                                <% } else { %>
                                                    <span class="badge badge-secondary">Archived</span>
                                                <% } %>
                                            </td>
                                            <td><%= new Date(post.created_at).toLocaleString() %></td>
                                            <td>
                                                <div class="form-button-action">
                                                    <button type="button" data-toggle="modal" data-target="#editPostModal" 
                                                        data-id="<%= post._id %>"
                                                        data-title="<%= post.title %>"
                                                        data-content="<%= post.content %>"
                                                        data-image="<%= post.image_url || '' %>"
                                                        data-buttons="<%= JSON.stringify(post.buttons || []) %>"
                                                        class="btn btn-link btn-primary btn-lg edit-post-btn">
                                                        <i class="fa fa-edit"></i>
                                                    </button>
                                                    <button type="button" data-toggle="modal" data-target="#publishPostModal" 
                                                        data-id="<%= post._id %>"
                                                        class="btn btn-link btn-success btn-lg">
                                                        <i class="fa fa-paper-plane"></i>
                                                    </button>
                                                    <button type="button" data-toggle="modal" data-target="#deletePostModal" 
                                                        data-id="<%= post._id %>"
                                                        class="btn btn-link btn-danger btn-lg">
                                                        <i class="fa fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Post Modal -->
<div class="modal fade" id="addPostModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Post</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addPostForm" action="/admin/channel-posts/add" method="POST">
                    <div class="form-group">
                        <label for="title">Title</label>
                        <input type="text" class="form-control" id="title" name="title" placeholder="Post Title" required>
                    </div>
                    <div class="form-group">
                        <label for="content">Content</label>
                        <textarea class="form-control" id="content" name="content" rows="5" placeholder="Post Content" required></textarea>
                        <small class="form-text text-muted">You can use basic HTML tags and Telegram formatting.</small>
                    </div>
                    <div class="form-group">
                        <label for="image_url">Image URL (Optional)</label>
                        <input type="url" class="form-control" id="image_url" name="image_url" placeholder="https://example.com/image.jpg">
                    </div>
                    
                    <hr>
                    <h5>Buttons</h5>
                    <div id="buttons-container">
                        <!-- Button rows will be added here -->
                    </div>
                    
                    <div class="form-group mt-3">
                        <button type="button" class="btn btn-sm btn-info add-button-row">
                            <i class="fa fa-plus"></i> Add Button
                        </button>
                    </div>
                    
                    <input type="hidden" id="buttons-json" name="buttons" value="[]">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="submit" form="addPostForm" class="btn btn-primary">Create Post</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Post Modal -->
<div class="modal fade" id="editPostModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Post</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editPostForm" action="/admin/channel-posts/edit" method="POST">
                    <input type="hidden" id="edit_post_id" name="post_id">
                    <div class="form-group">
                        <label for="edit_title">Title</label>
                        <input type="text" class="form-control" id="edit_title" name="title" placeholder="Post Title" required>
                    </div>
                    <div class="form-group">
                        <label for="edit_content">Content</label>
                        <textarea class="form-control" id="edit_content" name="content" rows="5" placeholder="Post Content" required></textarea>
                        <small class="form-text text-muted">You can use basic HTML tags and Telegram formatting.</small>
                    </div>
                    <div class="form-group">
                        <label for="edit_image_url">Image URL (Optional)</label>
                        <input type="url" class="form-control" id="edit_image_url" name="image_url" placeholder="https://example.com/image.jpg">
                    </div>
                    
                    <hr>
                    <h5>Buttons</h5>
                    <div id="edit-buttons-container">
                        <!-- Button rows will be added here -->
                    </div>
                    
                    <div class="form-group mt-3">
                        <button type="button" class="btn btn-sm btn-info add-edit-button-row">
                            <i class="fa fa-plus"></i> Add Button
                        </button>
                    </div>
                    
                    <input type="hidden" id="edit-buttons-json" name="buttons" value="[]">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="submit" form="editPostForm" class="btn btn-primary">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Publish Post Modal -->
<div class="modal fade" id="publishPostModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Publish Post</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="publishPostForm" action="/admin/channel-posts/publish" method="POST">
                    <input type="hidden" id="publish_post_id" name="post_id">
                    <p>Are you sure you want to publish this post to the channel?</p>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="submit" form="publishPostForm" class="btn btn-success">Publish</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Post Modal -->
<div class="modal fade" id="deletePostModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Post</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="deletePostForm" action="/admin/channel-posts/delete" method="POST">
                    <input type="hidden" id="delete_post_id" name="post_id">
                    <p>Are you sure you want to delete this post? This action cannot be undone.</p>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="submit" form="deletePostForm" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Button Template -->
<template id="button-row-template">
    <div class="button-row row mb-3">
        <div class="col-md-3">
            <label>Button Type</label>
            <div class="form-check">
                <input class="form-check-input button-type-radio" type="radio" name="button_type_radio" value="url" checked>
                <label class="form-check-label">Website Link</label>
            </div>
            <div class="form-check">
                <input class="form-check-input button-type-radio" type="radio" name="button_type_radio" value="bot">
                <label class="form-check-label">Bot Link</label>
            </div>
            <div class="form-check">
                <input class="form-check-input button-type-radio" type="radio" name="button_type_radio" value="support">
                <label class="form-check-label">Support</label>
            </div>
            <div class="form-check">
                <input class="form-check-input button-type-radio" type="radio" name="button_type_radio" value="webapp">
                <label class="form-check-label">Mini App</label>
            </div>
            <input type="hidden" class="button-type" value="url">
        </div>
        <div class="col-md-4">
            <label>Button Text</label>
            <input type="text" class="form-control button-text" placeholder="Button Text" required>
        </div>
        <div class="col-md-4">
            <label>Button Value (URL/Username)</label>
            <input type="text" class="form-control button-value" placeholder="URL or Username" required>
        </div>
        <div class="col-md-1 d-flex align-items-end">
            <button type="button" class="btn btn-sm btn-danger remove-button mb-2">
                <i class="fa fa-times"></i>
            </button>
        </div>
    </div>
</template>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize DataTable
    if (document.getElementById('posts-table')) {
        $('#posts-table').DataTable({
            "order": [[ 2, "desc" ]]
        });
    }
    
    // Button management for Add Post
    const addButtonsContainer = document.getElementById('buttons-container');
    const addButtonsJson = document.getElementById('buttons-json');
    const buttonTemplate = document.getElementById('button-row-template');
    
    // Function to update buttons JSON
    function updateButtonsJson(container, jsonField) {
        const buttons = [];
        const buttonRows = container.querySelectorAll('.button-row');
        
        buttonRows.forEach(row => {
            const type = row.querySelector('.button-type').value;
            const text = row.querySelector('.button-text').value;
            const value = row.querySelector('.button-value').value;
            
            if (type && text && value) {
                buttons.push({ type, text, value });
            }
        });
        
        jsonField.value = JSON.stringify(buttons);
    }
    
    // Function to handle radio button changes
    function setupRadioButtonHandlers(row) {
        const radioButtons = row.querySelectorAll('.button-type-radio');
        const hiddenField = row.querySelector('.button-type');
        
        radioButtons.forEach(radio => {
            // Set the correct radio button based on the hidden field
            if (radio.value === hiddenField.value) {
                radio.checked = true;
            }
            
            radio.addEventListener('change', function() {
                hiddenField.value = this.value;
                updateButtonsJson(this.closest('.button-row').parentNode, 
                    this.closest('.button-row').parentNode === addButtonsContainer ? 
                    addButtonsJson : editButtonsJson);
            });
        });
    }
    
    // Add button row for new post
    document.querySelector('.add-button-row').addEventListener('click', function() {
        const buttonRow = document.importNode(buttonTemplate.content, true);
        addButtonsContainer.appendChild(buttonRow);
        
        // Make sure all radio buttons in the same row share the same name
        const newRow = addButtonsContainer.lastElementChild;
        const randomId = 'btn_type_' + Math.random().toString(36).substring(2, 11);
        newRow.querySelectorAll('.button-type-radio').forEach(radio => {
            radio.name = randomId;
        });
        
        // Add event listeners to new row
        setupRadioButtonHandlers(newRow);
        
        newRow.querySelector('.button-text').addEventListener('input', () => updateButtonsJson(addButtonsContainer, addButtonsJson));
        newRow.querySelector('.button-value').addEventListener('input', () => updateButtonsJson(addButtonsContainer, addButtonsJson));
        newRow.querySelector('.remove-button').addEventListener('click', function() {
            newRow.remove();
            updateButtonsJson(addButtonsContainer, addButtonsJson);
        });
    });
    
    // Button management for Edit Post
    const editButtonsContainer = document.getElementById('edit-buttons-container');
    const editButtonsJson = document.getElementById('edit-buttons-json');
    
    // Add button row for edit post
    document.querySelector('.add-edit-button-row').addEventListener('click', function() {
        const buttonRow = document.importNode(buttonTemplate.content, true);
        editButtonsContainer.appendChild(buttonRow);
        
        // Make sure all radio buttons in the same row share the same name
        const newRow = editButtonsContainer.lastElementChild;
        const randomId = 'edit_btn_type_' + Math.random().toString(36).substring(2, 11);
        newRow.querySelectorAll('.button-type-radio').forEach(radio => {
            radio.name = randomId;
        });
        
        // Add event listeners to new row
        setupRadioButtonHandlers(newRow);
        
        newRow.querySelector('.button-text').addEventListener('input', () => updateButtonsJson(editButtonsContainer, editButtonsJson));
        newRow.querySelector('.button-value').addEventListener('input', () => updateButtonsJson(editButtonsContainer, editButtonsJson));
        newRow.querySelector('.remove-button').addEventListener('click', function() {
            newRow.remove();
            updateButtonsJson(editButtonsContainer, editButtonsJson);
        });
    });
    
    // Handle edit post
    document.querySelectorAll('.edit-post-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            const title = this.getAttribute('data-title');
            const content = this.getAttribute('data-content');
            const image = this.getAttribute('data-image');
            let buttons = [];
            
            try {
                buttons = JSON.parse(this.getAttribute('data-buttons') || '[]');
            } catch (e) {
                console.error('Error parsing buttons:', e);
            }
            
            document.getElementById('edit_post_id').value = id;
            document.getElementById('edit_title').value = title;
            document.getElementById('edit_content').value = content;
            document.getElementById('edit_image_url').value = image;
            
            // Clear existing buttons
            editButtonsContainer.innerHTML = '';
            
            // Add each button
            buttons.forEach(button => {
                const buttonRow = document.importNode(buttonTemplate.content, true);
                editButtonsContainer.appendChild(buttonRow);
                
                const newRow = editButtonsContainer.lastElementChild;
                
                // Make sure all radio buttons in the same row share the same name
                const randomId = 'edit_btn_type_' + Math.random().toString(36).substring(2, 11);
                newRow.querySelectorAll('.button-type-radio').forEach(radio => {
                    radio.name = randomId;
                    if (radio.value === button.type) {
                        radio.checked = true;
                    }
                });
                
                newRow.querySelector('.button-type').value = button.type;
                newRow.querySelector('.button-text').value = button.text;
                newRow.querySelector('.button-value').value = button.value;
                
                // Add event listeners
                setupRadioButtonHandlers(newRow);
                
                newRow.querySelector('.button-text').addEventListener('input', () => updateButtonsJson(editButtonsContainer, editButtonsJson));
                newRow.querySelector('.button-value').addEventListener('input', () => updateButtonsJson(editButtonsContainer, editButtonsJson));
                newRow.querySelector('.remove-button').addEventListener('click', function() {
                    newRow.remove();
                    updateButtonsJson(editButtonsContainer, editButtonsJson);
                });
            });
            
            // Update buttons JSON
            updateButtonsJson(editButtonsContainer, editButtonsJson);
        });
    });
    
    // Handle publish post
    const publishPostModal = document.getElementById('publishPostModal');
    if (publishPostModal) {
        publishPostModal.addEventListener('show.bs.modal', function(event) {
            const button = event.relatedTarget;
            const id = button.getAttribute('data-id');
            document.getElementById('publish_post_id').value = id;
        });
    }
    
    // Handle delete post
    const deletePostModal = document.getElementById('deletePostModal');
    if (deletePostModal) {
        deletePostModal.addEventListener('show.bs.modal', function(event) {
            const button = event.relatedTarget;
            const id = button.getAttribute('data-id');
            document.getElementById('delete_post_id').value = id;
        });
    }
    
    // Form submission event handlers
    const addPostForm = document.getElementById('addPostForm');
    if (addPostForm) {
        addPostForm.addEventListener('submit', function(e) {
            e.preventDefault();
            updateButtonsJson(addButtonsContainer, addButtonsJson);
            this.submit();
        });
    }
    
    const editPostForm = document.getElementById('editPostForm');
    if (editPostForm) {
        editPostForm.addEventListener('submit', function(e) {
            e.preventDefault();
            updateButtonsJson(editButtonsContainer, editButtonsJson);
            this.submit();
        });
    }
});
</script>

<%- include('partials/footer') %> 